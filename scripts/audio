#!/usr/local/munkireport/munkireport-python3
# Author tuxudo

import subprocess
import os
import plistlib
import sys
import platform
import json

sys.path.insert(0, '/usr/local/munki')
sys.path.insert(0, '/usr/local/munkireport')

from munkilib import FoundationPlist

def get_audio_info():
    '''Uses system profiler to get Audio info for this machine.'''
    cmd = ['/usr/sbin/system_profiler', 'SPAudioDataType', '-xml']
    proc = subprocess.Popen(cmd, shell=False, bufsize=-1,
                            stdin=subprocess.PIPE,
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    (output, unused_error) = proc.communicate()

    try:
        try:
            plist = plistlib.readPlistFromString(output)
        except AttributeError as e:
            plist = plistlib.loads(output)
        # system_profiler xml is an array
        sp_dict = plist[0]
        items = sp_dict['_items']
        return items
    except Exception:
        return {}

def flatten_audio_info(array, localization):
    '''Un-nest Audio devices, return array with objects with relevant keys'''
    out = []
    for obj in array:
        # Return nothing if machine doesn't have Audio
        if 'Audio' in obj and obj['Audio'] == "no_hardware":
            return {}

        device = {}
        for item in obj:
            # Don't process the bus itself
            if item == '_name' and "audio_bus" in obj[item]:
                continue  
            elif item == '_items':
                out = out + flatten_audio_info(obj['_items'], localization)
                
            elif item == '_name':
                device['name'] = obj[item]
            elif item == 'coreaudio_default_audio_output_device':
                device['default_audio_output'] = obj[item].replace("spaudio_","").title()
            elif item == 'coreaudio_default_audio_input_device':
                device['default_audio_input'] = obj[item].replace("spaudio_","").title()
            elif item == 'coreaudio_device_input':
                device['device_input'] = obj[item]
            elif item == 'coreaudio_device_output':
                device['device_output'] = obj[item]
            elif item == 'coreaudio_device_manufacturer':
                device['device_manufacturer'] = obj[item]
            elif item == 'coreaudio_device_srate':
                device['device_srate'] = obj[item]
            elif item == 'coreaudio_device_transport':
                #device['device_transport'] = obj[item].replace("coreaudio_device_type_","").title()
                device['device_transport'] = obj[item].replace("coreaudio_device_type_","")
            elif item == 'coreaudio_input_source':
                device['input_source'] = obj[item]
            elif item == 'coreaudio_output_source':
                device['output_source'] = obj[item]

        if "coreaudio_device" in device['name']: 
            continue
        if "Adobe" in device['name']: 
            continue
        if "After Effect" in device['name']: 
            continue
        if "hda_" in device['name']: 
            continue
        if "Splashtop" in device['name']: 
            continue
        if "Boom2Device" in device['name']: 
            continue
        if "Aggregate" in device['name']: 
            continue
        if "Premiere Pro" in device['name']: 
            continue
        if "iShowU" in device['name']: 
            continue
        if "coreaudio_device" in device['name']: 
            continue
        if "Soundflower" in device['name']: 
            continue
        if "virtual" in device['device_transport']: 
            continue
        if "builtin" in device['device_transport']: 
            continue


        # Only append device if it has a name
        if 'name' in device:
            out.append(device)

            
    return out

def to_bool(s):
    if s == True:
        return 1
    else:
        return 0 

def main():
    """Main"""
    # Create cache dir if it does not exist
    cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
    if not os.path.exists(cachedir):
        os.makedirs(cachedir)

    # Skip manual check
    if len(sys.argv) > 1:
        if sys.argv[1] == 'manualcheck':
            print('Manual check: skipping')
            exit(0)

    # Set the encoding
    # reload(sys)
    # sys.setdefaultencoding('utf8')

    # Read in English localizations from SystemProfiler
    if os.path.isfile('/System/Library/SystemProfiler/SPAudioReporter.spreporter/Contents/Resources/en.lproj/Localizable.strings'):
        localization = FoundationPlist.readPlist('/System/Library/SystemProfiler/SPAudioReporter.spreporter/Contents/Resources/en.lproj/Localizable.strings')
    elif os.path.isfile('/System/Library/SystemProfiler/SPAudioReporter.spreporter/Contents/Resources/English.lproj/Localizable.strings'):
        localization_dict = FoundationPlist.readPlist('/System/Library/SystemProfiler/SPThunderboltReporter.spreporter/Contents/Resources/Localizable.loctable')
        if "en" in localization_dict:
            localization = localization_dict["en"]
        elif "English" in localization_dict:
            localization = localization_dict["English"]
        else:
             localization = {}
    else:
        localization = {}

    # Get results
    result = dict()
    info = get_audio_info()
    result = flatten_audio_info(info, localization)

    # Write audio results to cache
    cachedir = '%s/cache' % os.path.dirname(os.path.realpath(__file__))
    output_plist = os.path.join(cachedir, 'audio.plist')
    try:
        plistlib.writePlist(result, output_plist)
    except:
        with open(output_plist, 'wb') as fp:
            plistlib.dump(result, fp, fmt=plistlib.FMT_XML)

if __name__ == "__main__":
    main()
